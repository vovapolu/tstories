# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import openaiproxy_pb2 as openaiproxy__pb2


class OpenAIProxyStub(object):
    """OpenAIProxy Сервис для проксирования запросов в API OpenAI(без регистрации и смс)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CompletionV1 = channel.unary_unary(
                '/openaiproxy.v1.OpenAIProxy/CompletionV1',
                request_serializer=openaiproxy__pb2.CompletionV1Request.SerializeToString,
                response_deserializer=openaiproxy__pb2.CompletionV1Response.FromString,
                )
        self.CompletionStreamV1 = channel.unary_stream(
                '/openaiproxy.v1.OpenAIProxy/CompletionStreamV1',
                request_serializer=openaiproxy__pb2.CompletionV1Request.SerializeToString,
                response_deserializer=openaiproxy__pb2.CompletionV1Response.FromString,
                )
        self.ChatCompletionV1 = channel.unary_unary(
                '/openaiproxy.v1.OpenAIProxy/ChatCompletionV1',
                request_serializer=openaiproxy__pb2.ChatCompletionV1Request.SerializeToString,
                response_deserializer=openaiproxy__pb2.ChatCompletionV1Response.FromString,
                )
        self.ChatCompletionStreamV1 = channel.unary_stream(
                '/openaiproxy.v1.OpenAIProxy/ChatCompletionStreamV1',
                request_serializer=openaiproxy__pb2.ChatCompletionV1Request.SerializeToString,
                response_deserializer=openaiproxy__pb2.ChatCompletionStreamV1Response.FromString,
                )


class OpenAIProxyServicer(object):
    """OpenAIProxy Сервис для проксирования запросов в API OpenAI(без регистрации и смс)
    """

    def CompletionV1(self, request, context):
        """CompletionV1, не стримовая, параметр stream по умолчанию установлен в false. Основная документация https://platform.openai.com/docs/api-reference/completions/create
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompletionStreamV1(self, request, context):
        """CompletionStreamV1, стримовая, параметр stream по умолчанию установлен в true. Основная документация https://platform.openai.com/docs/api-reference/completions/create
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChatCompletionV1(self, request, context):
        """ChatCompletionV1, не стримовая, параметр stream по умолчанию установлен в false. Основная документация https://platform.openai.com/docs/api-reference/chat/create
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChatCompletionStreamV1(self, request, context):
        """ChatCompletionV1, стримовая, параметр stream по умолчанию установлен в true. Основная документация https://platform.openai.com/docs/api-reference/chat/create
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OpenAIProxyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CompletionV1': grpc.unary_unary_rpc_method_handler(
                    servicer.CompletionV1,
                    request_deserializer=openaiproxy__pb2.CompletionV1Request.FromString,
                    response_serializer=openaiproxy__pb2.CompletionV1Response.SerializeToString,
            ),
            'CompletionStreamV1': grpc.unary_stream_rpc_method_handler(
                    servicer.CompletionStreamV1,
                    request_deserializer=openaiproxy__pb2.CompletionV1Request.FromString,
                    response_serializer=openaiproxy__pb2.CompletionV1Response.SerializeToString,
            ),
            'ChatCompletionV1': grpc.unary_unary_rpc_method_handler(
                    servicer.ChatCompletionV1,
                    request_deserializer=openaiproxy__pb2.ChatCompletionV1Request.FromString,
                    response_serializer=openaiproxy__pb2.ChatCompletionV1Response.SerializeToString,
            ),
            'ChatCompletionStreamV1': grpc.unary_stream_rpc_method_handler(
                    servicer.ChatCompletionStreamV1,
                    request_deserializer=openaiproxy__pb2.ChatCompletionV1Request.FromString,
                    response_serializer=openaiproxy__pb2.ChatCompletionStreamV1Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'openaiproxy.v1.OpenAIProxy', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OpenAIProxy(object):
    """OpenAIProxy Сервис для проксирования запросов в API OpenAI(без регистрации и смс)
    """

    @staticmethod
    def CompletionV1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openaiproxy.v1.OpenAIProxy/CompletionV1',
            openaiproxy__pb2.CompletionV1Request.SerializeToString,
            openaiproxy__pb2.CompletionV1Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompletionStreamV1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/openaiproxy.v1.OpenAIProxy/CompletionStreamV1',
            openaiproxy__pb2.CompletionV1Request.SerializeToString,
            openaiproxy__pb2.CompletionV1Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChatCompletionV1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/openaiproxy.v1.OpenAIProxy/ChatCompletionV1',
            openaiproxy__pb2.ChatCompletionV1Request.SerializeToString,
            openaiproxy__pb2.ChatCompletionV1Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChatCompletionStreamV1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/openaiproxy.v1.OpenAIProxy/ChatCompletionStreamV1',
            openaiproxy__pb2.ChatCompletionV1Request.SerializeToString,
            openaiproxy__pb2.ChatCompletionStreamV1Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
